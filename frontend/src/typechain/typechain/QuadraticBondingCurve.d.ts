/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface QuadraticBondingCurveInterface extends ethers.utils.Interface {
  functions: {
    "PRICE_CLIFF()": FunctionFragment;
    "SUPPLY_CAP()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "quoteBuy(uint256)": FunctionFragment;
    "quoteBuyRaw(uint256,uint256)": FunctionFragment;
    "quoteSell(uint256)": FunctionFragment;
    "quoteSellRaw(uint256,uint256)": FunctionFragment;
    "sell(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PRICE_CLIFF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPLY_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "buy", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteBuy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBuyRaw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSell",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSellRaw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRICE_CLIFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SUPPLY_CAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteBuyRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteSell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteSellRaw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class QuadraticBondingCurve extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: QuadraticBondingCurveInterface;

  functions: {
    PRICE_CLIFF(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRICE_CLIFF()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SUPPLY_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SUPPLY_CAP()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      tokensToBuy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    quoteBuy(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "quoteBuy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteBuyRaw(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "quoteBuyRaw(uint256,uint256)"(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteSell(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "quoteSell(uint256)"(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteSellRaw(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "quoteSellRaw(uint256,uint256)"(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sell(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "sell(uint256,uint256)"(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  PRICE_CLIFF(overrides?: CallOverrides): Promise<BigNumber>;

  "PRICE_CLIFF()"(overrides?: CallOverrides): Promise<BigNumber>;

  SUPPLY_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  "SUPPLY_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buy(
    tokensToBuy: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(uint256)"(
    tokensToBuy: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  quoteBuy(
    tokensToBuy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteBuy(uint256)"(
    tokensToBuy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteBuyRaw(
    tokensToBuy: BigNumberish,
    currentPsiSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteBuyRaw(uint256,uint256)"(
    tokensToBuy: BigNumberish,
    currentPsiSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteSell(
    tokensToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteSell(uint256)"(
    tokensToSell: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteSellRaw(
    tokensToSell: BigNumberish,
    currentPsiSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quoteSellRaw(uint256,uint256)"(
    tokensToSell: BigNumberish,
    currentPsiSupply: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sell(
    tokensToSell: BigNumberish,
    minEther: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "sell(uint256,uint256)"(
    tokensToSell: BigNumberish,
    minEther: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    PRICE_CLIFF(overrides?: CallOverrides): Promise<BigNumber>;

    "PRICE_CLIFF()"(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "SUPPLY_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(tokensToBuy: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "buy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    quoteBuy(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteBuy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBuyRaw(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteBuyRaw(uint256,uint256)"(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSell(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteSell(uint256)"(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSellRaw(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteSellRaw(uint256,uint256)"(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint256,uint256)"(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    PRICE_CLIFF(overrides?: CallOverrides): Promise<BigNumber>;

    "PRICE_CLIFF()"(overrides?: CallOverrides): Promise<BigNumber>;

    SUPPLY_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    "SUPPLY_CAP()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      tokensToBuy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteBuy(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteBuy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBuyRaw(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteBuyRaw(uint256,uint256)"(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSell(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteSell(uint256)"(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteSellRaw(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteSellRaw(uint256,uint256)"(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "sell(uint256,uint256)"(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRICE_CLIFF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRICE_CLIFF()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUPPLY_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SUPPLY_CAP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      tokensToBuy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteBuy(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteBuy(uint256)"(
      tokensToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBuyRaw(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteBuyRaw(uint256,uint256)"(
      tokensToBuy: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSell(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteSell(uint256)"(
      tokensToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteSellRaw(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteSellRaw(uint256,uint256)"(
      tokensToSell: BigNumberish,
      currentPsiSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "sell(uint256,uint256)"(
      tokensToSell: BigNumberish,
      minEther: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
